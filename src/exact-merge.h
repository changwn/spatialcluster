#pragma once

#include "utils.h"

// --------- EXACT MERGE ----------------
//
// Merge the clusters generated by the rcpp_exact_initial. Seperate class and
// routines to allow results from rcpp_exact_initial to be returned and cached
// for subsequent re-merging.

namespace ex_merge {

struct OneCluster
{
    int id;
    size_t n;
    double dist_sum, dist_max;
    std::vector <utils::OneEdge> edges;
};

struct OneMerge
{
    int cli, clj;
    double merge_dist;
};

struct ExMergeDat
{
    std::unordered_map <int, int> cl_remap;
    std::unordered_map <int, intset_t> cl_members;
    std::unordered_map <int, OneCluster> clusters;
    std::vector <utils::OneEdge> edges; // edges between clusters
    std::vector <OneMerge> merges;
};

struct OneAvgDist
{
    int cli, clj;
    size_t ni, nj;
    double di, dj, d, average; 
    // di, dj are dist_sums, d is min dist of connecting edge
};

struct AvgDists
{
    std::vector <OneAvgDist> avg_dists;
};

void init (const Rcpp::DataFrame &gr, ExMergeDat &cldat);

OneMerge merge (ExMergeDat &cldat, index_t ei);
void single (ExMergeDat &cldat);

bool avgdist_sorter (const OneAvgDist &lhs, const OneAvgDist &rhs);
size_t count_num_clusters (ExMergeDat &cldat,
        const std::unordered_map <std::string, double> &edge_dist_map);
void fill_avg_dists (ExMergeDat &cldat,
        const std::unordered_map <std::string, double> &edge_dist_map,
        AvgDists &cl_dists);
void avg (ExMergeDat &cldat);
void max (ExMergeDat &cldat);

} // end namespace ex_merge

Rcpp::NumericMatrix rcpp_exact_merge (
        const Rcpp::DataFrame gr,
        const std::string method);
