% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clusters.R
\name{scl_cluster}
\alias{scl_cluster}
\title{scl_cluster}
\usage{
scl_cluster(xy, dmat, ncl, full_order = TRUE, linkage = "single",
  shortest = TRUE)
}
\arguments{
\item{xy}{Rectangular structure (matrix, data.frame, tibble), containing
coordinates of points to be clustered.}

\item{dmat}{Square structure (matrix, data.frame, tibble) containing
distances or equivalent metrics betwen all points in \code{xy}. If \code{xy}
has \code{n} rows, then \code{dat} must have \code{n} rows and \code{n}
columns.}

\item{ncl}{Desired number of clusters}

\item{full_order}{If \code{FALSE}, build spanning trees from first-order
relationships only, otherwise build from full-order relationships (see Note).}

\item{linkage}{One of \code{"single"}, \code{"average"}, or
\code{"complete"}; see Note.}

\item{shortest}{If \code{TRUE}, the \code{dmat} is interpreted as distances
such that lower values are preferentially selected; if \code{FALSE}, then
higher values of \code{dmat} are interpreted to indicate stronger
relationships, as is the case for example with covariances.}
}
\value{
A object of class \code{scl} with \code{tree} containing the
clustering scheme, and \code{xy} the original coordinate data of the
clustered points. An additional component, \code{tree_rest}, enables the tree
to be re-cut to a different number of clusters via \link{scl_recluster},
rather than calculating clusters anew.
}
\description{
Cluster spatial data
}
\note{
Please refer to the original REDCAP paper ('Regionalization with
dynamically constrained agglomerative clustering and partitioning (REDCAP)',
by D. Guo (2008), Int.J.Geo.Inf.Sci 22:801-823) for details of the
\code{full_order} and \code{linkage} parameters. This paper clearly
demonstrates the general inferiority of spanning trees constructed from
first-order relationships. It is therefore strongly recommended that the default
\code{full_order = TRUE} be used at all times.
}
\examples{
n <- 20
xy <- matrix (runif (2 * n), ncol = 2)
dmat <- matrix (runif (n ^ 2), ncol = n)
scl <- scl_cluster (xy, dmat, ncl = 4)
# Those clusters will by default be constructed by connecting edges with the
# lowest (\\code{shortest}) values of \\code{dmat}, and will differ from
scl <- scl_cluster (xy, dmat, ncl = 4, shortest = FALSE)
# using 'full_order = FALSE' constructs clusters from first-order
# relationships only; not recommended, but possible nevertheless:
scl <- scl_cluster (xy, dmat, ncl = 4, full_order = FALSE)
}
